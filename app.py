# -*- coding: utf-8 -*-
import streamlit as st
import pandas as pd
from datetime import datetime, date
import numpy as np
from PIL import Image
import io
import base64
import json
from reportlab.lib.pagesizes import letter, A4
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer, Image as RLImage
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.lib import colors
import tempfile
import os
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.base import MIMEBase
from email import encoders
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import plotly.graph_objects as go

# Configuraci√É¬≥n de la p√É¬°gina
st.set_page_config(

    page_title="ColpoVision - An√É¬°lisis de Colposcop√É¬≠a",
    page_icon="√∞≈∏‚Äù¬¨",
    layout="wide",
    initial_sidebar_state="expanded"
)
st.title("ü©∫ ColpoVision - An√°lisis de Colposcop√≠a")

# CSS personalizado
st.markdown("""
<style>
    .main-header {
        background: linear-gradient(90deg, #1e3c72 0%, #2a5298 100%);
        padding: 1rem;
        border-radius: 10px;
        color: white;
        text-align: center;
        margin-bottom: 2rem;
    }
    .patient-card {
        background: #f8f9fa;
        padding: 1rem;
        border-radius: 8px;
        border-left: 4px solid #007bff;
        margin-bottom: 1rem;
    }
    .result-card {
        background: white;
        padding: 1.5rem;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        margin: 1rem 0;
    }
    .metric-card {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 1rem;
        border-radius: 8px;
        text-align: center;
    }
</style>
""", unsafe_allow_html=True)

# Inicializaci√É¬≥n del estado de la sesi√É¬≥n
if 'patients_db' not in st.session_state:
    st.session_state.patients_db = []
if 'current_patient' not in st.session_state:
    st.session_state.current_patient = None
if 'analysis_results' not in st.session_state:
    st.session_state.analysis_results = []

class PatientManager:
    @staticmethod
    def add_patient(patient_data):
        """Agregar nuevo paciente a la base de datos"""
        patient_data['id'] = len(st.session_state.patients_db) + 1
        patient_data['created_at'] = datetime.now()
        st.session_state.patients_db.append(patient_data)
        return patient_data['id']
    
    @staticmethod
    def get_patient(patient_id):
        """Obtener paciente por ID"""
        for patient in st.session_state.patients_db:
            if patient['id'] == patient_id:
                return patient
        return None
    
    @staticmethod
    def update_patient(patient_id, updated_data):
        """Actualizar datos del paciente"""
        for i, patient in enumerate(st.session_state.patients_db):
            if patient['id'] == patient_id:
                st.session_state.patients_db[i].update(updated_data)
                return True
        return False
    
    @staticmethod
    def get_all_patients():
        """Obtener todos los pacientes"""
        return st.session_state.patients_db

class ImageAnalyzer:
    @staticmethod
    def analyze_image(image, analysis_type="individual"):
        """Simular an√É¬°lisis de imagen con IA"""
        # Simulaci√É¬≥n de an√É¬°lisis - aqu√É¬≠ ir√É¬≠a tu modelo de IA real
        np.random.seed(42)  # Para resultados consistentes
        
        results = {
            'timestamp': datetime.now(),
            'analysis_type': analysis_type,
            'predictions': {
                'Normal': np.random.uniform(0.1, 0.4),
                'CIN I': np.random.uniform(0.1, 0.3),
                'CIN II': np.random.uniform(0.1, 0.3),
                'CIN III': np.random.uniform(0.1, 0.3),
                'Carcinoma': np.random.uniform(0.05, 0.2)
            },
            'confidence': np.random.uniform(0.75, 0.95),
            'image_quality': np.random.uniform(0.8, 1.0),
            'recommendations': []
        }
        
        # Normalizar probabilidades
        total = sum(results['predictions'].values())
        results['predictions'] = {k: v/total for k, v in results['predictions'].items()}
        
        # Generar recomendaciones basadas en el resultado principal
        max_class = max(results['predictions'], key=results['predictions'].get)
        max_prob = results['predictions'][max_class]
        
        if max_class == 'Normal':
            results['recommendations'] = [
                "Continuar con controles de rutina",
                "Repetir colposcop√É¬≠a en 12 meses"
            ]
        elif max_class in ['CIN I']:
            results['recommendations'] = [
                "Seguimiento estrecho cada 6 meses",
                "Considerar biopsia si persiste",
                "Evaluaci√É¬≥n de factores de riesgo"
            ]
        elif max_class in ['CIN II', 'CIN III']:
            results['recommendations'] = [
                "Biopsia confirmativa recomendada",
                "Tratamiento seg√É¬∫n protocolo",
                "Seguimiento oncol√É¬≥gico"
            ]
        else:
            results['recommendations'] = [
                "Evaluaci√É¬≥n oncol√É¬≥gica urgente",
                "Biopsia confirmatoria inmediata",
                "Estadificaci√É¬≥n completa"
            ]
        
        return results

class ReportGenerator:
    @staticmethod
    def create_pdf_report(patient_data, analysis_results, image_data=None):
        """Generar reporte PDF"""
        buffer = io.BytesIO()
        doc = SimpleDocTemplate(buffer, pagesize=A4)
        styles = getSampleStyleSheet()
        story = []
        
        # Estilo personalizado para el t√É¬≠tulo
        title_style = ParagraphStyle(
            'CustomTitle',
            parent=styles['Heading1'],
            fontSize=18,
            spaceAfter=30,
            alignment=1,  # Centrado
            textColor=colors.darkblue
        )
        
        # T√É¬≠tulo del reporte
        story.append(Paragraph("REPORTE DE AN√É¬ÅLISIS COLPOSC√É‚ÄúPICO", title_style))
        story.append(Spacer(1, 20))
        
        # Informaci√É¬≥n del paciente
        patient_info = [
            ['Datos del Paciente', ''],
            ['Nombre:', f"{patient_data['nombre']} {patient_data['apellido']}"],
            ['Identificaci√É¬≥n:', patient_data['identificacion']],
            ['Fecha de Nacimiento:', str(patient_data['fecha_nacimiento'])],
            ['Edad:', str(patient_data['edad'])],
            ['Tel√É¬©fono:', patient_data.get('telefono', 'N/A')],
            ['Email:', patient_data.get('email', 'N/A')],
            ['Fecha del An√É¬°lisis:', analysis_results['timestamp'].strftime('%d/%m/%Y %H:%M')]
        ]
        
        patient_table = Table(patient_info, colWidths=[2*inch, 4*inch])
        patient_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (1, 0), colors.grey),
            ('TEXTCOLOR', (0, 0), (1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 12),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
            ('GRID', (0, 0), (-1, -1), 1, colors.black)
        ]))
        
        story.append(patient_table)
        story.append(Spacer(1, 20))
        
        # Resultados del an√É¬°lisis
        story.append(Paragraph("RESULTADOS DEL AN√É¬ÅLISIS", styles['Heading2']))
        story.append(Spacer(1, 10))
        
        results_data = [['Diagn√É¬≥stico', 'Probabilidad (%)']]
        for diag, prob in analysis_results['predictions'].items():
            results_data.append([diag, f"{prob*100:.1f}%"])
        
        results_table = Table(results_data, colWidths=[3*inch, 2*inch])
        results_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.darkblue),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 12),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.lightgrey),
            ('GRID', (0, 0), (-1, -1), 1, colors.black)
        ]))
        
        story.append(results_table)
        story.append(Spacer(1, 20))
        
        # Recomendaciones
        story.append(Paragraph("RECOMENDACIONES CL√É¬çNICAS", styles['Heading2']))
        story.append(Spacer(1, 10))
        
        for i, rec in enumerate(analysis_results['recommendations'], 1):
            story.append(Paragraph(f"{i}. {rec}", styles['Normal']))
            story.append(Spacer(1, 5))
        
        story.append(Spacer(1, 20))
        
        # Informaci√É¬≥n adicional
        info_adicional = f"""
        <b>Confianza del an√É¬°lisis:</b> {analysis_results['confidence']*100:.1f}%<br/>
        <b>Calidad de imagen:</b> {analysis_results['image_quality']*100:.1f}%<br/>
        <b>Tipo de an√É¬°lisis:</b> {analysis_results['analysis_type'].title()}<br/>
        <br/>
        <i>Este reporte es generado autom√É¬°ticamente por el sistema ColpoVision y debe ser 
        interpretado por un profesional m√É¬©dico calificado. No sustituye el juicio cl√É¬≠nico.</i>
        """
        
        story.append(Paragraph(info_adicional, styles['Normal']))
        
        doc.build(story)
        buffer.seek(0)
        return buffer

class EmailSender:
    @staticmethod
    def send_report_email(recipient_email, patient_name, pdf_buffer, smtp_config):
        """Enviar reporte por email"""
        try:
            msg = MIMEMultipart()
            msg['From'] = smtp_config['email']
            msg['To'] = recipient_email
            msg['Subject'] = f"Reporte de An√É¬°lisis Colposc√É¬≥pico - {patient_name}"
            
            body = f"""
            Estimado/a paciente,
            
            Adjunto encontrar√É¬° el reporte de su an√É¬°lisis colposc√É¬≥pico realizado el {datetime.now().strftime('%d/%m/%Y')}.
            
            Por favor, consulte con su m√É¬©dico tratante para la interpretaci√É¬≥n de los resultados.
            
            Saludos cordiales,
            Sistema ColpoVision
            """
            
            msg.attach(MIMEText(body, 'plain'))
            
            # Adjuntar PDF
            part = MIMEBase('application', 'octet-stream')
            part.set_payload(pdf_buffer.read())
            encoders.encode_base64(part)
            part.add_header(
                'Content-Disposition',
                f'attachment; filename="Reporte_Colposcopia_{patient_name.replace(" ", "_")}.pdf"'
            )
            msg.attach(part)
            
            # Enviar email
            server = smtplib.SMTP(smtp_config['smtp_server'], smtp_config['port'])
            server.starttls()
            server.login(smtp_config['email'], smtp_config['password'])
            text = msg.as_string()
            server.sendmail(smtp_config['email'], recipient_email, text)
            server.quit()
            
            return True, "Email enviado exitosamente"
        except Exception as e:
            return False, f"Error al enviar email: {str(e)}"

def main():
    # Header principal
    st.markdown("""
    <div class="main-header">
        <h1>√∞≈∏‚Äù¬¨ ColpoVision</h1>
        <p>Sistema de An√É¬°lisis de Colposcop√É¬≠a con Inteligencia Artificial</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Sidebar para navegaci√É¬≥n
    st.sidebar.title("√∞≈∏‚Äú‚Äπ Men√É¬∫ Principal")
    page = st.sidebar.selectbox(
        "Seleccionar Secci√É¬≥n:",
        ["√∞≈∏¬è  Dashboard", "√∞≈∏‚Äò¬§ Gesti√É¬≥n de Pacientes", "√∞≈∏‚Äù¬ç An√É¬°lisis de Im√É¬°genes", 
         "√∞≈∏‚Äú≈† Reportes", "√∞≈∏‚Äú¬ß Env√É¬≠o de Resultados", "√¢≈°‚Ñ¢√Ø¬∏¬è Configuraci√É¬≥n"]
    )
    
    if page == "√∞≈∏¬è  Dashboard":
        show_dashboard()
    elif page == "√∞≈∏‚Äò¬§ Gesti√É¬≥n de Pacientes":
        show_patient_management()
    elif page == "√∞≈∏‚Äù¬ç An√É¬°lisis de Im√É¬°genes":
        show_image_analysis()
    elif page == "√∞≈∏‚Äú≈† Reportes":
        show_reports()
    elif page == "√∞≈∏‚Äú¬ß Env√É¬≠o de Resultados":
        show_email_sender()
    elif page == "√¢≈°‚Ñ¢√Ø¬∏¬è Configuraci√É¬≥n":
        show_configuration()

def show_dashboard():
    st.header("√∞≈∏‚Äú≈† Dashboard General")
    
    # M√É¬©tricas principales
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.markdown("""
        <div class="metric-card">
            <h3>√∞≈∏‚Äò¬§ Pacientes</h3>
            <h2>{}</h2>
        </div>
        """.format(len(st.session_state.patients_db)), unsafe_allow_html=True)
    
    with col2:
        total_analyses = len(st.session_state.analysis_results)
        st.markdown("""
        <div class="metric-card">
            <h3>√∞≈∏‚Äù¬ç An√É¬°lisis</h3>
            <h2>{}</h2>
        </div>
        """.format(total_analyses), unsafe_allow_html=True)
    
    with col3:
        st.markdown("""
        <div class="metric-card">
            <h3>√∞≈∏‚ÄúÀÜ Precisi√É¬≥n</h3>
            <h2>94.2%</h2>
        </div>
        """, unsafe_allow_html=True)
    
    with col4:
        st.markdown("""
        <div class="metric-card">
            <h3>√¢¬è¬±√Ø¬∏¬è Tiempo Prom.</h3>
            <h2>2.3 min</h2>
        </div>
        """, unsafe_allow_html=True)
    
    st.markdown("---")
    
    # Gr√É¬°ficos de ejemplo
    if st.session_state.analysis_results:
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("√∞≈∏‚Äú≈† Distribuci√É¬≥n de Diagn√É¬≥sticos")
            # Crear gr√É¬°fico de ejemplo
            diagnoses = ['Normal', 'CIN I', 'CIN II', 'CIN III', 'Carcinoma']
            values = [45, 25, 15, 10, 5]  # Valores de ejemplo
            
            fig = px.pie(values=values, names=diagnoses, 
                        title="Distribuci√É¬≥n de Diagn√É¬≥sticos")
            st.plotly_chart(fig, use_container_width=True)
        
        with col2:
            st.subheader("√∞≈∏‚ÄúÀÜ An√É¬°lisis por Mes")
            # Gr√É¬°fico de tendencia temporal
            months = ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun']
            analyses = [12, 15, 18, 22, 19, 25]
            
            fig = px.line(x=months, y=analyses, title="An√É¬°lisis Realizados por Mes")
            st.plotly_chart(fig, use_container_width=True)

def show_patient_management():
    st.header("√∞≈∏‚Äò¬§ Gesti√É¬≥n de Pacientes")
    
    tab1, tab2, tab3 = st.tabs(["√¢≈æ‚Ä¢ Nuevo Paciente", "√∞≈∏‚Äú‚Äπ Lista de Pacientes", "√¢≈ì¬è√Ø¬∏¬è Editar Paciente"])
    
    with tab1:
        st.subheader("Agregar Nuevo Paciente")
        
        with st.form("nuevo_paciente"):
            col1, col2 = st.columns(2)
            
            with col1:
                nombre = st.text_input("Nombre *", placeholder="Ingrese el nombre")
                identificacion = st.text_input("Identificaci√É¬≥n *", placeholder="N√É¬∫mero de identificaci√É¬≥n")
                fecha_nacimiento = st.date_input("Fecha de Nacimiento *")
                telefono = st.text_input("Tel√É¬©fono", placeholder="N√É¬∫mero de tel√É¬©fono")
                
            with col2:
                apellido = st.text_input("Apellido *", placeholder="Ingrese el apellido")
                email = st.text_input("Email", placeholder="correo@ejemplo.com")
                edad = st.number_input("Edad", min_value=0, max_value=120, value=30)
                direccion = st.text_area("Direcci√É¬≥n", placeholder="Direcci√É¬≥n completa")
            
            # Informaci√É¬≥n m√É¬©dica adicional
            st.subheader("Informaci√É¬≥n M√É¬©dica")
            col3, col4 = st.columns(2)
            
            with col3:
                antecedentes = st.text_area("Antecedentes M√É¬©dicos")
                medicamentos = st.text_area("Medicamentos Actuales")
                
            with col4:
                alergias = st.text_area("Alergias")
                observaciones = st.text_area("Observaciones")
            
            submitted = st.form_submit_button("√∞≈∏‚Äô¬æ Guardar Paciente", type="primary")
            
            if submitted:
                if nombre and apellido and identificacion:
                    patient_data = {
                        'nombre': nombre,
                        'apellido': apellido,
                        'identificacion': identificacion,
                        'fecha_nacimiento': fecha_nacimiento,
                        'edad': edad,
                        'telefono': telefono,
                        'email': email,
                        'direccion': direccion,
                        'antecedentes': antecedentes,
                        'medicamentos': medicamentos,
                        'alergias': alergias,
                        'observaciones': observaciones
                    }
                    
                    patient_id = PatientManager.add_patient(patient_data)
                    st.success(f"√¢≈ì‚Ä¶ Paciente agregado exitosamente con ID: {patient_id}")
                    st.balloons()
                else:
                    st.error("√¢≈° √Ø¬∏¬è Por favor complete los campos obligatorios marcados con *")
    
    with tab2:
        st.subheader("Lista de Pacientes Registrados")
        
        if st.session_state.patients_db:
            # Crear DataFrame para mostrar
            df_patients = pd.DataFrame(st.session_state.patients_db)
            
            # Filtros
            col1, col2 = st.columns(2)
            with col1:
                search_term = st.text_input("√∞≈∏‚Äù¬ç Buscar paciente", placeholder="Nombre, apellido o identificaci√É¬≥n")
            with col2:
                sort_by = st.selectbox("Ordenar por:", ["nombre", "apellido", "fecha_nacimiento", "created_at"])
            
            # Aplicar filtros
            if search_term:
                mask = (
                    df_patients['nombre'].str.contains(search_term, case=False, na=False) |
                    df_patients['apellido'].str.contains(search_term, case=False, na=False) |
                    df_patients['identificacion'].str.contains(search_term, case=False, na=False)
                )
                df_patients = df_patients[mask]
            
            # Mostrar tabla
            for idx, patient in df_patients.iterrows():
                with st.container():
                    st.markdown(f"""
                    <div class="patient-card">
                        <h4>√∞≈∏‚Äò¬§ {patient['nombre']} {patient['apellido']}</h4>
                        <p><strong>ID:</strong> {patient['identificacion']} | 
                           <strong>Edad:</strong> {patient['edad']} a√É¬±os | 
                           <strong>Tel√É¬©fono:</strong> {patient.get('telefono', 'N/A')} |
                           <strong>Email:</strong> {patient.get('email', 'N/A')}</p>
                    </div>
                    """, unsafe_allow_html=True)
                    
                    col1, col2, col3 = st.columns([1, 1, 2])
                    if col1.button(f"√∞≈∏‚Äú‚Äπ Ver Detalles", key=f"details_{patient['id']}"):
                        st.session_state.selected_patient = patient['id']
                    if col2.button(f"√∞≈∏‚Äù¬ç Analizar", key=f"analyze_{patient['id']}"):
                        st.session_state.current_patient = patient['id']
                        st.rerun()
        else:
            st.info("√∞≈∏‚Äú¬ù No hay pacientes registrados. Agregue el primer paciente en la pesta√É¬±a 'Nuevo Paciente'.")
    
    with tab3:
        st.subheader("Editar Informaci√É¬≥n del Paciente")
        
        if st.session_state.patients_db:
            patient_options = {f"{p['nombre']} {p['apellido']} - {p['identificacion']}": p['id'] 
                             for p in st.session_state.patients_db}
            
            selected_patient_key = st.selectbox("Seleccionar paciente:", list(patient_options.keys()))
            
            if selected_patient_key:
                patient_id = patient_options[selected_patient_key]
                patient = PatientManager.get_patient(patient_id)
                
                if patient:
                    with st.form(f"edit_patient_{patient_id}"):
                        col1, col2 = st.columns(2)
                        
                        with col1:
                            nombre = st.text_input("Nombre", value=patient['nombre'])
                            identificacion = st.text_input("Identificaci√É¬≥n", value=patient['identificacion'])
                            telefono = st.text_input("Tel√É¬©fono", value=patient.get('telefono', ''))
                            
                        with col2:
                            apellido = st.text_input("Apellido", value=patient['apellido'])
                            email = st.text_input("Email", value=patient.get('email', ''))
                            edad = st.number_input("Edad", value=patient['edad'], min_value=0, max_value=120)
                        
                        direccion = st.text_area("Direcci√É¬≥n", value=patient.get('direccion', ''))
                        
                        if st.form_submit_button("√∞≈∏‚Äô¬æ Actualizar Datos"):
                            updated_data = {
                                'nombre': nombre,
                                'apellido': apellido,
                                'identificacion': identificacion,
                                'telefono': telefono,
                                'email': email,
                                'edad': edad,
                                'direccion': direccion
                            }
                            
                            if PatientManager.update_patient(patient_id, updated_data):
                                st.success("√¢≈ì‚Ä¶ Datos actualizados correctamente")
                                st.rerun()
                            else:
                                st.error("√¢¬ù≈í Error al actualizar los datos")
        else:
            st.info("No hay pacientes registrados para editar.")

def show_image_analysis():
    st.header("√∞≈∏‚Äù¬ç An√É¬°lisis de Im√É¬°genes")
    
    # Selecci√É¬≥n de paciente
    if st.session_state.patients_db:
        patient_options = {f"{p['nombre']} {p['apellido']} - {p['identificacion']}": p['id'] 
                         for p in st.session_state.patients_db}
        
        selected_patient_key = st.selectbox("√∞≈∏‚Äò¬§ Seleccionar Paciente:", 
                                          ["Seleccione un paciente..."] + list(patient_options.keys()))
        
        if selected_patient_key != "Seleccione un paciente...":
            patient_id = patient_options[selected_patient_key]
            patient = PatientManager.get_patient(patient_id)
            
            st.success(f"√∞≈∏‚Äú‚Äπ Paciente seleccionado: {patient['nombre']} {patient['apellido']}")
            
            # Tipo de an√É¬°lisis
            analysis_type = st.radio("Tipo de An√É¬°lisis:", 
                                   ["√∞≈∏‚Äù¬ç An√É¬°lisis Individual", "√∞≈∏‚Äú≈† An√É¬°lisis por Lotes", "√¢≈°‚Äì√Ø¬∏¬è Comparaci√É¬≥n de T√É¬©cnicas"])
            
            if analysis_type == "√∞≈∏‚Äù¬ç An√É¬°lisis Individual":
                show_individual_analysis(patient)
            elif analysis_type == "√∞≈∏‚Äú≈† An√É¬°lisis por Lotes":
                show_batch_analysis(patient)
            else:
                show_technique_comparison(patient)
    else:
        st.warning("√¢≈° √Ø¬∏¬è Primero debe registrar pacientes en la secci√É¬≥n 'Gesti√É¬≥n de Pacientes'")

def show_individual_analysis(patient):
    st.subheader("√∞≈∏‚Äù¬ç An√É¬°lisis Individual de Imagen")
    
    uploaded_file = st.file_uploader("√∞≈∏‚Äú¬∑ Cargar imagen de colposcop√É¬≠a", 
                                   type=['png', 'jpg', 'jpeg', 'tiff'])
    
    if uploaded_file is not None:
        # Mostrar imagen
        image = Image.open(uploaded_file)
        
        col1, col2 = st.columns([1, 1])
        
        with col1:
            st.image(image, caption="Imagen Original", use_column_width=True)
            
            # Opciones de procesamiento
            st.subheader("√¢≈°‚Ñ¢√Ø¬∏¬è Opciones de Procesamiento")
            enhance_contrast = st.checkbox("Mejorar Contraste", value=True)
            reduce_noise = st.checkbox("Reducir Ruido", value=True)
            edge_detection = st.checkbox("Detecci√É¬≥n de Bordes", value=False)
        
        with col2:
            if st.button("√∞≈∏≈°‚Ç¨ Realizar An√É¬°lisis", type="primary", use_container_width=True):
                with st.spinner("Analizando imagen... Por favor espere"):
                    # Simular tiempo de procesamiento
                    import time
                    time.sleep(2)
                    
                    # Realizar an√É¬°lisis
                    results = ImageAnalyzer.analyze_image(image, "individual")
                    
                    # Guardar resultados
                    analysis_record = {
                        'patient_id': patient['id'],
                        'results': results,
                        'image_name': uploaded_file.name,
                        'analysis_date': datetime.now()
                    }
                    st.session_state.analysis_results.append(analysis_record)
                    
                    # Mostrar resultados
                    show_analysis_results(results)
                    
                    # Bot√É¬≥n para generar reporte
                    if st.button("√∞≈∏‚Äú‚Äû Generar Reporte PDF"):
                        pdf_buffer = ReportGenerator.create_pdf_report(patient, results)
                        st.download_button(
                            label="√¢¬¨‚Ä°√Ø¬∏¬è Descargar Reporte",
                            data=pdf_buffer,
                            file_name=f"Reporte_{patient['apellido']}_{datetime.now().strftime('%Y%m%d_%H%M')}.pdf",
                            mime="application/pdf"
                        )

def show_batch_analysis(patient):
    st.subheader("√∞≈∏‚Äú≈† An√É¬°lisis por Lotes")
    
    uploaded_files = st.file_uploader("√∞≈∏‚Äú¬∑ Cargar m√É¬∫ltiples im√É¬°genes", 
                                    type=['png', 'jpg', 'jpeg', 'tiff'],
                                    accept_multiple_files=True)
    
    if uploaded_files:
        st.info(f"√¢≈ì‚Ä¶ {len(uploaded_files)} im√É¬°genes cargadas")
        
        if st.button("√∞≈∏≈°‚Ç¨ Procesar Lote", type="primary"):
            progress_bar = st.progress(0)
            results_container = st.container()
            
            batch_results = []
            
            for i, uploaded_file in enumerate(uploaded_files):
                # Actualizar barra de progreso
                progress = (i + 1) / len(uploaded_files)
                progress_bar.progress(progress)
                
                # Procesar imagen
                image = Image.open(uploaded_file)
                results = ImageAnalyzer.analyze_image(image, "batch")
                
                batch_results.append({
                    'filename': uploaded_file.name,
                    'results': results
                })
                
                # Mostrar progreso
                with results_container:
                    st.write(f"√¢≈ì‚Ä¶ Procesada: {uploaded_file.name}")
            
            # Mostrar resumen del lote
            st.success("√∞≈∏≈Ω‚Ä∞ An√É¬°lisis por lotes completado!")
            show_batch_summary(batch_results)
            
            # Guardar resultados del lote
            batch_record = {
                'patient_id': patient['id'],
                'batch_results': batch_results,
                'batch_date': datetime.now(),
                'total_images': len(uploaded_files)
            }
            st.session_state.analysis_results.append(batch_record)

def show_technique_comparison(patient):
    st.subheader("√¢≈°‚Äì√Ø¬∏¬è Comparaci√É¬≥n de T√É¬©cnicas")
    
    uploaded_file = st.file_uploader("√∞≈∏‚Äú¬∑ Cargar imagen para comparar t√É¬©cnicas", 
                                   type=['png', 'jpg', 'jpeg', 'tiff'])
    
    if uploaded_file is not None:
        image = Image.open(uploaded_file)
        st.image(image, caption="Imagen para Comparaci√É¬≥n", use_column_width=True)
        
        if st.button("√∞≈∏‚Äù¬¨ Comparar T√É¬©cnicas", type="primary"):
            with st.spinner("Comparando diferentes t√É¬©cnicas de an√É¬°lisis..."):
                import time
                time.sleep(3)  # Simular procesamiento
                
                # Simular diferentes t√É¬©cnicas
                techniques = ['CNN B√É¬°sico', 'ResNet-50', 'EfficientNet', 'Vision Transformer']
                comparison_results = {}
                
                for technique in techniques:
                    results = ImageAnalyzer.analyze_image(image, f"comparison_{technique}")
                    comparison_results[technique] = results
                
                show_technique_comparison_results(comparison_results)

def show_analysis_results(results):
    st.subheader("√∞≈∏≈Ω¬Ø Resultados del An√É¬°lisis")
    
    # Resultado principal
    max_class = max(results['predictions'], key=results['predictions'].get)
    max_prob = results['predictions'][max_class]
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("√∞≈∏≈Ω¬Ø Diagn√É¬≥stico Principal", max_class, f"{max_prob*100:.1f}%")
    
    with col2:
        st.metric("√∞≈∏‚Äù¬ç Confianza", f"{results['confidence']*100:.1f}%")
    
    with col3:
        st.metric("√∞≈∏‚Äú¬∏ Calidad de Imagen", f"{results['image_quality']*100:.1f}%")
    
    # Gr√É¬°fico de probabilidades
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("√∞≈∏‚Äú≈† Distribuci√É¬≥n de Probabilidades")
        labels = list(results['predictions'].keys())
        values = [v*100 for v in results['predictions'].values()]
        
        fig = px.bar(x=labels, y=values, 
                    title="Probabilidades por Diagn√É¬≥stico",
                    labels={'x': 'Diagn√É¬≥stico', 'y': 'Probabilidad (%)'})
        fig.update_layout(showlegend=False)
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        st.subheader("√∞≈∏¬•¬ß Vista Circular")
        fig = px.pie(values=values, names=labels, 
                    title="Distribuci√É¬≥n de Probabilidades")
        st.plotly_chart(fig, use_container_width=True)
    
    # Recomendaciones
    st.subheader("√∞≈∏‚Äô¬° Recomendaciones Cl√É¬≠nicas")
    for i, rec in enumerate(results['recommendations'], 1):
        st.write(f"**{i}.** {rec}")
    
    # Informaci√É¬≥n t√É¬©cnica
    with st.expander("√∞≈∏‚Äù¬ß Informaci√É¬≥n T√É¬©cnica"):
        st.json({
            'Timestamp': results['timestamp'].isoformat(),
            'Analysis Type': results['analysis_type'],
            'Confidence Score': results['confidence'],
            'Image Quality Score': results['image_quality']
        })

def show_batch_summary(batch_results):
    st.subheader("√∞≈∏‚ÄúÀÜ Resumen del An√É¬°lisis por Lotes")
    
    # Estad√É¬≠sticas generales
    total_images = len(batch_results)
    avg_confidence = np.mean([r['results']['confidence'] for r in batch_results])
    avg_quality = np.mean([r['results']['image_quality'] for r in batch_results])
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("√∞≈∏‚Äú≈† Total Im√É¬°genes", total_images)
    with col2:
        st.metric("√∞≈∏≈Ω¬Ø Confianza Promedio", f"{avg_confidence*100:.1f}%")
    with col3:
        st.metric("√∞≈∏‚Äú¬∏ Calidad Promedio", f"{avg_quality*100:.1f}%")
    
    # Distribuci√É¬≥n de diagn√É¬≥sticos
    all_predictions = {}
    for result in batch_results:
        for diag, prob in result['results']['predictions'].items():
            if diag not in all_predictions:
                all_predictions[diag] = []
            all_predictions[diag].append(prob)
    
    # Gr√É¬°fico de distribuci√É¬≥n
    diagnoses = list(all_predictions.keys())
    avg_probs = [np.mean(all_predictions[diag])*100 for diag in diagnoses]
    
    fig = px.bar(x=diagnoses, y=avg_probs,
                title="Distribuci√É¬≥n Promedio de Diagn√É¬≥sticos en el Lote",
                labels={'x': 'Diagn√É¬≥stico', 'y': 'Probabilidad Promedio (%)'})
    st.plotly_chart(fig, use_container_width=True)
    
    # Tabla detallada
    st.subheader("√∞≈∏‚Äú‚Äπ Resultados Detallados")
    results_data = []
    for result in batch_results:
        max_diag = max(result['results']['predictions'], 
                      key=result['results']['predictions'].get)
        max_prob = result['results']['predictions'][max_diag]
        
        results_data.append({
            'Archivo': result['filename'],
            'Diagn√É¬≥stico Principal': max_diag,
            'Probabilidad': f"{max_prob*100:.1f}%",
            'Confianza': f"{result['results']['confidence']*100:.1f}%",
            'Calidad': f"{result['results']['image_quality']*100:.1f}%"
        })
    
    df = pd.DataFrame(results_data)
    st.dataframe(df, use_container_width=True)

def show_technique_comparison_results(comparison_results):
    st.subheader("√¢≈°‚Äì√Ø¬∏¬è Comparaci√É¬≥n de T√É¬©cnicas")
    
    # Tabla comparativa
    comparison_data = []
    for technique, results in comparison_results.items():
        max_diag = max(results['predictions'], key=results['predictions'].get)
        max_prob = results['predictions'][max_diag]
        
        comparison_data.append({
            'T√É¬©cnica': technique,
            'Diagn√É¬≥stico': max_diag,
            'Probabilidad': f"{max_prob*100:.1f}%",
            'Confianza': f"{results['confidence']*100:.1f}%",
            'Tiempo (s)': np.random.uniform(1.5, 4.2)  # Tiempo simulado
        })
    
    df = pd.DataFrame(comparison_data)
    st.dataframe(df, use_container_width=True)
    
    # Gr√É¬°fico comparativo
    techniques = list(comparison_results.keys())
    diagnoses = list(comparison_results[techniques[0]]['predictions'].keys())
    
    fig = go.Figure()
    
    for technique in techniques:
        probs = [comparison_results[technique]['predictions'][diag]*100 
                for diag in diagnoses]
        fig.add_trace(go.Scatter(x=diagnoses, y=probs, 
                               mode='lines+markers', name=technique))
    
    fig.update_layout(title="Comparaci√É¬≥n de Probabilidades por T√É¬©cnica",
                     xaxis_title="Diagn√É¬≥stico",
                     yaxis_title="Probabilidad (%)")
    
    st.plotly_chart(fig, use_container_width=True)

def show_reports():
    st.header("√∞≈∏‚Äú≈† Gesti√É¬≥n de Reportes")
    
    if not st.session_state.analysis_results:
        st.info("√∞≈∏‚Äú¬ù No hay an√É¬°lisis realizados. Realice an√É¬°lisis en la secci√É¬≥n correspondiente.")
        return
    
    tab1, tab2, tab3 = st.tabs(["√∞≈∏‚Äú‚Äπ Historial", "√∞≈∏‚Äú‚Äû Generar Reporte", "√∞≈∏‚ÄúÀÜ Estad√É¬≠sticas"])
    
    with tab1:
        st.subheader("Historial de An√É¬°lisis")
        
        # Filtros
        col1, col2 = st.columns(2)
        with col1:
            date_filter = st.date_input("Filtrar por fecha")
        with col2:
            patient_filter = st.selectbox("Filtrar por paciente", 
                                        ["Todos"] + [f"{p['nombre']} {p['apellido']}" 
                                                   for p in st.session_state.patients_db])
        
        # Mostrar historial
        for i, analysis in enumerate(st.session_state.analysis_results):
            patient = PatientManager.get_patient(analysis['patient_id'])
            if patient:
                with st.expander(f"An√É¬°lisis #{i+1} - {patient['nombre']} {patient['apellido']}", 
                               expanded=False):
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        st.write(f"**Fecha:** {analysis['analysis_date'].strftime('%d/%m/%Y %H:%M')}")
                        st.write(f"**Paciente:** {patient['nombre']} {patient['apellido']}")
                        if 'image_name' in analysis:
                            st.write(f"**Imagen:** {analysis['image_name']}")
                    
                    with col2:
                        if st.button(f"√∞≈∏‚Äú‚Äû Ver Reporte", key=f"report_{i}"):
                            pdf_buffer = ReportGenerator.create_pdf_report(
                                patient, analysis['results'])
                            st.download_button(
                                label="√¢¬¨‚Ä°√Ø¬∏¬è Descargar PDF",
                                data=pdf_buffer,
                                file_name=f"Reporte_{patient['apellido']}_{i+1}.pdf",
                                mime="application/pdf",
                                key=f"download_{i}"
                            )
    
    with tab2:
        st.subheader("Generar Nuevo Reporte")
        
        if st.session_state.patients_db and st.session_state.analysis_results:
            # Selecci√É¬≥n de an√É¬°lisis
            analysis_options = []
            for i, analysis in enumerate(st.session_state.analysis_results):
                patient = PatientManager.get_patient(analysis['patient_id'])
                if patient:
                    analysis_options.append(
                        f"An√É¬°lisis #{i+1} - {patient['nombre']} {patient['apellido']} - {analysis['analysis_date'].strftime('%d/%m/%Y')}"
                    )
            
            selected_analysis = st.selectbox("Seleccionar an√É¬°lisis:", analysis_options)
            
            if selected_analysis:
                analysis_idx = int(selected_analysis.split('#')[1].split(' ')[0]) - 1
                analysis = st.session_state.analysis_results[analysis_idx]
                patient = PatientManager.get_patient(analysis['patient_id'])
                
                # Opciones del reporte
                include_images = st.checkbox("Incluir im√É¬°genes", value=True)
                include_recommendations = st.checkbox("Incluir recomendaciones", value=True)
                include_technical_info = st.checkbox("Incluir informaci√É¬≥n t√É¬©cnica", value=False)
                
                if st.button("√∞≈∏‚Äú‚Äû Generar Reporte Personalizado"):
                    pdf_buffer = ReportGenerator.create_pdf_report(patient, analysis['results'])
                    st.download_button(
                        label="√¢¬¨‚Ä°√Ø¬∏¬è Descargar Reporte",
                        data=pdf_buffer,
                        file_name=f"Reporte_Personalizado_{patient['apellido']}.pdf",
                        mime="application/pdf"
                    )
    
    with tab3:
        st.subheader("Estad√É¬≠sticas Generales")
        show_statistics()

def show_statistics():
    if not st.session_state.analysis_results:
        st.info("No hay datos suficientes para mostrar estad√É¬≠sticas.")
        return
    
    # M√É¬©tricas generales
    total_analyses = len(st.session_state.analysis_results)
    total_patients = len(set(a['patient_id'] for a in st.session_state.analysis_results))
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("√∞≈∏‚Äù¬ç Total An√É¬°lisis", total_analyses)
    with col2:
        st.metric("√∞≈∏‚Äò¬• Pacientes √É≈°nicos", total_patients)
    with col3:
        avg_analyses = total_analyses / len(st.session_state.patients_db) if st.session_state.patients_db else 0
        st.metric("√∞≈∏‚Äú≈† Promedio por Paciente", f"{avg_analyses:.1f}")
    with col4:
        # √É≈°ltimo an√É¬°lisis
        if st.session_state.analysis_results:
            last_analysis = max(st.session_state.analysis_results, 
                              key=lambda x: x['analysis_date'])
            days_since = (datetime.now() - last_analysis['analysis_date']).days
            st.metric("√∞≈∏‚Äú‚Ä¶ √É≈°ltimo An√É¬°lisis", f"Hace {days_since} d√É¬≠as")
    
    # Gr√É¬°ficos de tendencias
    st.subheader("√∞≈∏‚ÄúÀÜ Tendencias")
    
    # Crear datos de ejemplo para gr√É¬°ficos
    dates = [datetime.now() - pd.Timedelta(days=30-i) for i in range(30)]
    analyses_per_day = np.random.poisson(2, 30)  # Simulaci√É¬≥n
    
    df_trend = pd.DataFrame({
        'Fecha': dates,
        'An√É¬°lisis': analyses_per_day
    })
    
    fig = px.line(df_trend, x='Fecha', y='An√É¬°lisis', 
                 title="An√É¬°lisis Realizados por D√É¬≠a (√É≈°ltimos 30 d√É¬≠as)")
    st.plotly_chart(fig, use_container_width=True)

def show_email_sender():
    st.header("√∞≈∏‚Äú¬ß Env√É¬≠o de Resultados")
    
    if not st.session_state.analysis_results:
        st.warning("√¢≈° √Ø¬∏¬è No hay an√É¬°lisis disponibles para enviar.")
        return
    
    # Configuraci√É¬≥n SMTP
    with st.expander("√¢≈°‚Ñ¢√Ø¬∏¬è Configuraci√É¬≥n de Email", expanded=False):
        col1, col2 = st.columns(2)
        
        with col1:
            smtp_server = st.text_input("Servidor SMTP", value="smtp.gmail.com")
            smtp_port = st.number_input("Puerto", value=587)
            sender_email = st.text_input("Email del remitente")
            
        with col2:
            sender_password = st.text_input("Contrase√É¬±a", type="password")
            use_tls = st.checkbox("Usar TLS", value=True)
    
    # Selecci√É¬≥n de an√É¬°lisis para enviar
    st.subheader("√∞≈∏‚Äú‚Äπ Seleccionar An√É¬°lisis")
    
    analysis_options = []
    for i, analysis in enumerate(st.session_state.analysis_results):
        patient = PatientManager.get_patient(analysis['patient_id'])
        if patient:
            analysis_options.append({
                'label': f"An√É¬°lisis #{i+1} - {patient['nombre']} {patient['apellido']} - {analysis['analysis_date'].strftime('%d/%m/%Y')}",
                'index': i,
                'patient': patient,
                'analysis': analysis
            })
    
    selected_analyses = st.multiselect(
        "Seleccionar an√É¬°lisis para enviar:",
        options=analysis_options,
        format_func=lambda x: x['label']
    )
    
    if selected_analyses:
        st.subheader("√∞≈∏‚Äú¬ß Configurar Env√É¬≠o")
        
        # Destinatarios
        recipients = []
        for selected in selected_analyses:
            patient = selected['patient']
            if patient.get('email'):
                recipients.append(patient['email'])
        
        # Opciones de env√É¬≠o
        send_to_patient = st.checkbox("Enviar a pacientes", value=True)
        
        additional_emails = st.text_area(
            "Emails adicionales (separados por comas):",
            placeholder="doctor@hospital.com, admin@clinica.com"
        )
        
        if additional_emails:
            additional_list = [email.strip() for email in additional_emails.split(',')]
            recipients.extend(additional_list)
        
        # Personalizar email
        email_subject = st.text_input(
            "Asunto del email:",
            value="Resultados de An√É¬°lisis Colposc√É¬≥pico"
        )
        
        email_body = st.text_area(
            "Mensaje personalizado:",
            value="""Estimado/a paciente,

Adjunto encontrar√É¬° los resultados de su an√É¬°lisis colposc√É¬≥pico.

Por favor, consulte con su m√É¬©dico tratante para la interpretaci√É¬≥n de los resultados.

Saludos cordiales,
Equipo M√É¬©dico"""
        )
        
        # Bot√É¬≥n de env√É¬≠o
        if st.button("√∞≈∏‚Äú¬ß Enviar Reportes", type="primary"):
            if sender_email and sender_password and recipients:
                success_count = 0
                error_count = 0
                
                progress_bar = st.progress(0)
                status_container = st.container()
                
                smtp_config = {
                    'smtp_server': smtp_server,
                    'port': smtp_port,
                    'email': sender_email,
                    'password': sender_password
                }
                
                for i, selected in enumerate(selected_analyses):
                    progress = (i + 1) / len(selected_analyses)
                    progress_bar.progress(progress)
                    
                    patient = selected['patient']
                    analysis = selected['analysis']
                    
                    # Generar PDF
                    pdf_buffer = ReportGenerator.create_pdf_report(patient, analysis['results'])
                    
                    # Enviar a cada destinatario
                    patient_recipients = [patient.get('email')] if patient.get('email') else []
                    if additional_emails:
                        patient_recipients.extend(additional_list)
                    
                    for recipient in patient_recipients:
                        try:
                            success, message = EmailSender.send_report_email(
                                recipient, 
                                f"{patient['nombre']} {patient['apellido']}", 
                                pdf_buffer, 
                                smtp_config
                            )
                            
                            if success:
                                success_count += 1
                                with status_container:
                                    st.success(f"√¢≈ì‚Ä¶ Enviado a {recipient}")
                            else:
                                error_count += 1
                                with status_container:
                                    st.error(f"√¢¬ù≈í Error enviando a {recipient}: {message}")
                                    
                        except Exception as e:
                            error_count += 1
                            with status_container:
                                st.error(f"√¢¬ù≈í Error enviando a {recipient}: {str(e)}")
                
                # Resumen final
                st.success(f"√∞≈∏≈Ω‚Ä∞ Proceso completado: {success_count} enviados exitosamente, {error_count} errores")
                
            else:
                st.error("√¢≈° √Ø¬∏¬è Por favor complete la configuraci√É¬≥n SMTP y verifique que hay destinatarios v√É¬°lidos")
    
    # Historial de env√É¬≠os
    st.subheader("√∞≈∏‚Äú¬ù Historial de Env√É¬≠os")
    
    if 'email_history' not in st.session_state:
        st.session_state.email_history = []
    
    if st.session_state.email_history:
        df_history = pd.DataFrame(st.session_state.email_history)
        st.dataframe(df_history, use_container_width=True)
    else:
        st.info("No hay historial de env√É¬≠os disponible.")

def show_configuration():
    st.header("√¢≈°‚Ñ¢√Ø¬∏¬è Configuraci√É¬≥n del Sistema")
    
    tab1, tab2, tab3, tab4 = st.tabs(["√∞≈∏≈Ω¬® Apariencia", "√∞≈∏¬§‚Äì Modelo IA", "√∞≈∏‚Äú¬ß Email", "√∞≈∏‚Äô¬æ Datos"])
    
    with tab1:
        st.subheader("Configuraci√É¬≥n de Apariencia")
        
        # Tema
        theme = st.se
# Agregar estas mejoras al archivo app.py

import hashlib
import re
from datetime import timedelta

# 1. Validaci√É¬≥n de datos mejorada
class DataValidator:
    @staticmethod
    def validate_email(email):
        pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
        return re.match(pattern, email) is not None
    
    @staticmethod
    def validate_identification(identification):
        # Validar que solo contenga n√É¬∫meros y letras
        return identification.isalnum() and len(identification) >= 5
    
    @staticmethod
    def validate_patient_data(data):
        errors = []
        
        if not data.get('nombre') or len(data['nombre'].strip()) < 2:
            errors.append("Nombre debe tener al menos 2 caracteres")
        
        if not data.get('apellido') or len(data['apellido'].strip()) < 2:
            errors.append("Apellido debe tener al menos 2 caracteres")
        
        if not DataValidator.validate_identification(data.get('identificacion', '')):
            errors.append("Identificaci√É¬≥n debe ser alfanum√É¬©rica y tener al menos 5 caracteres")
        
        if data.get('email') and not DataValidator.validate_email(data['email']):
            errors.append("Formato de email inv√É¬°lido")
        
        if data.get('edad', 0) < 0 or data.get('edad', 0) > 120:
            errors.append("Edad debe estar entre 0 y 120 a√É¬±os")
        
        return errors

# 2. Persistencia mejorada
class DataPersistence:
    DATA_FILE = 'colpovision_data.pkl'
    
    @staticmethod
    def save_data():
        """Guardar datos en archivo"""
        try:
            data = {
                'patients_db': st.session_state.patients_db,
                'analysis_results': st.session_state.analysis_results,
                'timestamp': datetime.now()
            }
            with open(DataPersistence.DATA_FILE, 'wb') as f:
                pickle.dump(data, f)
            return True
        except Exception as e:
            st.error(f"Error al guardar datos: {e}")
            return False
    
    @staticmethod
    def load_data():
        """Cargar datos desde archivo"""
        try:
            if os.path.exists(DataPersistence.DATA_FILE):
                with open(DataPersistence.DATA_FILE, 'rb') as f:
                    data = pickle.load(f)
                
                st.session_state.patients_db = data.get('patients_db', [])
                st.session_state.analysis_results = data.get('analysis_results', [])
                return True
        except Exception as e:
            st.error(f"Error al cargar datos: {e}")
        return False
    
    @staticmethod
    def auto_save():
        """Guardado autom√É¬°tico cada 5 minutos"""
        if 'last_save' not in st.session_state:
            st.session_state.last_save = datetime.now()
        
        if datetime.now() - st.session_state.last_save > timedelta(minutes=5):
            if DataPersistence.save_data():
                st.session_state.last_save = datetime.now()

# 3. Seguridad b√É¬°sica
class SecurityManager:
    @staticmethod
    def hash_password(password):
        """Hash de contrase√É¬±a"""
        return hashlib.sha256(password.encode()).hexdigest()
    
    @staticmethod
    def verify_password(password, hashed):
        """Verificar contrase√É¬±a"""
        return SecurityManager.hash_password(password) == hashed
    
    @staticmethod
    def sanitize_filename(filename):
        """Sanitizar nombre de archivo"""
        # Remover caracteres peligrosos
        safe_chars = re.sub(r'[^\w\s-]', '', filename)
        return re.sub(r'[-\s]+', '-', safe_chars)

# 4. Logging mejorado
class Logger:
    @staticmethod
    def setup_logging():
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler('colpovision.log'),
                logging.StreamHandler()
            ]
        )
    
    @staticmethod
    def log_analysis(patient_id, result_type, confidence):
        """Log de an√É¬°lisis realizado"""
        logger = logging.getLogger(__name__)
        logger.info(f"An√É¬°lisis realizado - Paciente: {patient_id}, Tipo: {result_type}, Confianza: {confidence}")
    
    @staticmethod
    def log_error(error_msg, context=""):
        """Log de errores"""
        logger = logging.getLogger(__name__)
        logger.error(f"Error: {error_msg} - Contexto: {context}")

# 5. Mejoras en ImageAnalyzer
class EnhancedImageAnalyzer(ImageAnalyzer):
    @staticmethod
    def preprocess_image(image):
        """Preprocesamiento mejorado de im√É¬°genes"""
        import cv2
        import numpy as np
        from PIL import ImageEnhance
        
        # Convertir a array numpy
        img_array = np.array(image)
        
        # Mejorar contraste
        enhancer = ImageEnhance.Contrast(image)
        enhanced_img = enhancer.enhance(1.2)
        
        # Reducir ruido (simulado)
        # En producci√É¬≥n usar cv2.bilateralFilter o similar
        
        return enhanced_img
    
    @staticmethod
    def validate_image_quality(image):
        """Validar calidad de imagen"""
        # Convertir a array
        img_array = np.array(image)
        
        # Verificar dimensiones m√É¬≠nimas
        height, width = img_array.shape[:2]
        if height < 224 or width < 224:
            return False, "Imagen muy peque√É¬±a (m√É¬≠nimo 224x224)"
        
        # Verificar que no est√É¬© completamente negra o blanca
        mean_intensity = np.mean(img_array)
        if mean_intensity < 10:
            return False, "Imagen muy oscura"
        if mean_intensity > 245:
            return False, "Imagen muy clara"
        
        return True, "Calidad aceptable"

# 6. Configuraci√É¬≥n centralizada
class Config:
    # Configuraci√É¬≥n por defecto
    DEFAULT_CONFIG = {
        'ui': {
            'theme': 'light',
            'primary_color': '#1e3c72',
            'secondary_color': '#2a5298'
        },
        'model': {
            'confidence_threshold': 0.75,
            'batch_size': 8,
            'max_image_size': 512
        },
        'email': {
            'smtp_server': 'smtp.gmail.com',
            'smtp_port': 587,
            'use_tls': True
        }
    }
    
    @staticmethod
    def load_config():
        """Cargar configuraci√É¬≥n"""
        if 'app_config' not in st.session_state:
            st.session_state.app_config = Config.DEFAULT_CONFIG.copy()
        return st.session_state.app_config
    
    @staticmethod
    def save_config(config):
        """Guardar configuraci√É¬≥n"""
        st.session_state.app_config = config
        # Aqu√É¬≠ se podr√É¬≠a guardar en archivo tambi√É¬©n
        
    @staticmethod
    def get_config_value(path, default=None):
        """Obtener valor de configuraci√É¬≥n por ruta (ej: 'ui.theme')"""
        config = Config.load_config()
        keys = path.split('.')
        
        for key in keys:
            if isinstance(config, dict) and key in config:
                config = config[key]
            else:
                return default
        
        return config

# Modificar la funci√É¬≥n main para incluir mejoras
def enhanced_main():
    # Configurar logging
    Logger.setup_logging()
    
    # Cargar datos al inicio
    if 'data_loaded' not in st.session_state:
        DataPersistence.load_data()
        st.session_state.data_loaded = True
    
    # Guardado autom√É¬°tico
    DataPersistence.auto_save()
    
    # Cargar configuraci√É¬≥n
    config = Config.load_config()
    
    # Resto del c√É¬≥digo main original...
    main()
    
    # Guardar datos al final
    DataPersistence.save_data()

# Para usar las mejoras, reemplazar la l√É¬≠nea final:
# if __name__ == "__main__":
#     enhanced_main()
